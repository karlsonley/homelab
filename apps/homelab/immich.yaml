apiVersion: v1
kind: Namespace
metadata:
  name: immich
---
apiVersion: external-secrets.io/v1
kind: ExternalSecret
metadata:
  name: immich-db-password
  namespace: immich
spec:
  refreshInterval: 15m
  secretStoreRef:
    kind: ClusterSecretStore
    name: scaleway-secret-manager
  target:
    name: immich-db-password
    template:
      data:
        username: "immich"
        password: "{{ .password }}"
  data:
  - secretKey: password
    remoteRef:
      key: name:immich-db-password
      version: latest_enabled
---
apiVersion: external-secrets.io/v1
kind: ExternalSecret
metadata:
  name: immich-config
  namespace: immich
spec:
  refreshInterval: 15m
  secretStoreRef:
    kind: ClusterSecretStore
    name: scaleway-secret-manager
  target:
    name: immich-config
    template:
      data:
        immich.json: |
          {
            "oauth": {
              "enabled": true,
              "autoRegister": true,
              "autoLaunch": false,
              "buttonText": "Login with Pocket-ID",
              "clientId": "{{ .oidc_client_id }}",
              "clientSecret": "{{ .oidc_client_secret }}",
              "issuerUrl": "https://pocket-id.sonley.dev",
              "scope": "openid email profile"
            },
            "passwordLogin": {
              "enabled": false
            }
          }
  data:
  - secretKey: oidc_client_id
    remoteRef:
      key: name:pocket-id
      property: oidc_client_id
      version: latest_enabled
  - secretKey: oidc_client_secret
    remoteRef:
      key: name:pocket-id
      property: oidc_client_secret
      version: latest_enabled
---
apiVersion: postgresql.cnpg.io/v1
kind: Cluster
metadata:
  name: immich-postgres
  namespace: immich
spec:
  instances: 3
  imageName: ghcr.io/tensorchord/cloudnative-pgvecto.rs:16.5-v0.3.0
  primaryUpdateStrategy: unsupervised
  postgresql:
    shared_preload_libraries:
      - vectors
  storage:
    size: 20Gi
    storageClass: longhorn
  bootstrap:
    initdb:
      database: immich
      owner: immich
      secret:
        name: immich-db-password
      postInitApplicationSQL:
        - CREATE EXTENSION IF NOT EXISTS "vectors"
        - CREATE EXTENSION IF NOT EXISTS "earthdistance" CASCADE
        - GRANT ALL ON SCHEMA vectors TO immich
        - GRANT ALL ON ALL TABLES IN SCHEMA vectors TO immich
        - ALTER DEFAULT PRIVILEGES IN SCHEMA vectors GRANT ALL ON TABLES TO immich
  monitoring:
    enablePodMonitor: true
---
apiVersion: v1
kind: PersistentVolume
metadata:
  name: immich-library-nfs
spec:
  capacity:
    storage: 500Gi
  accessModes:
    - ReadWriteMany
  persistentVolumeReclaimPolicy: Retain
  storageClassName: immich-nfs
  mountOptions:
    - nfsvers=3
    - hard
    - timeo=600
    - retrans=2
    - actimeo=30
    - lookupcache=positive
  nfs:
    server: 10.0.2.100
    path: /volume1/immich/library
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: immich-library
  namespace: immich
spec:
  accessModes:
    - ReadWriteMany
  storageClassName: immich-nfs
  resources:
    requests:
      storage: 500Gi
  volumeName: immich-library-nfs
---
apiVersion: image.toolkit.fluxcd.io/v1beta2
kind: ImageRepository
metadata:
  name: immich-server
  namespace: flux-system
spec:
  image: ghcr.io/immich-app/immich-server
  interval: 10m
---
apiVersion: image.toolkit.fluxcd.io/v1beta2
kind: ImagePolicy
metadata:
  name: immich-server
  namespace: flux-system
spec:
  imageRepositoryRef:
    name: immich-server
  policy:
    semver:
      range: ">=2.0.0 <3.0.0"
---
apiVersion: image.toolkit.fluxcd.io/v1beta2
kind: ImageRepository
metadata:
  name: immich-machine-learning
  namespace: flux-system
spec:
  image: ghcr.io/immich-app/immich-machine-learning
  interval: 10m
---
apiVersion: image.toolkit.fluxcd.io/v1beta2
kind: ImagePolicy
metadata:
  name: immich-machine-learning
  namespace: flux-system
spec:
  imageRepositoryRef:
    name: immich-machine-learning
  policy:
    semver:
      range: ">=2.0.0 <3.0.0"
---
apiVersion: image.toolkit.fluxcd.io/v1beta2
kind: ImageRepository
metadata:
  name: valkey
  namespace: flux-system
spec:
  image: docker.io/valkey/valkey
  interval: 10m
---
apiVersion: image.toolkit.fluxcd.io/v1beta2
kind: ImagePolicy
metadata:
  name: valkey
  namespace: flux-system
spec:
  imageRepositoryRef:
    name: valkey
  filterTags:
    pattern: '^(?P<version>[0-9]+\.[0-9]+\.[0-9]+)-alpine$'
    extract: '$version'
  policy:
    semver:
      range: ">=8.0.0 <9.0.0"
---
apiVersion: image.toolkit.fluxcd.io/v1beta2
kind: ImageUpdateAutomation
metadata:
  name: immich
  namespace: flux-system
spec:
  interval: 10m
  sourceRef:
    kind: GitRepository
    name: flux-system
  git:
    checkout:
      ref:
        branch: main
    commit:
      author:
        email: fluxcdbot@users.noreply.github.com
        name: fluxcdbot
      messageTemplate: |
        chore(immich): update image to {{range .Updated.Images}}{{println .}}{{end}}
    push:
      branch: main
  update:
    path: ./apps/homelab/immich.yaml
    strategy: Setters
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: immich-redis
  namespace: immich
spec:
  replicas: 1
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 0
  selector:
    matchLabels:
      app: immich-redis
  template:
    metadata:
      labels:
        app: immich-redis
    spec:
      securityContext:
        runAsNonRoot: true
        runAsUser: 999
        runAsGroup: 1000
        fsGroup: 1000
        seccompProfile:
          type: RuntimeDefault
      containers:
      - name: redis
        image: docker.io/valkey/valkey:8.1.4-alpine # {"$imagepolicy": "flux-system:valkey"}
        ports:
        - containerPort: 6379
          name: redis
        securityContext:
          allowPrivilegeEscalation: false
          runAsNonRoot: true
          capabilities:
            drop:
            - ALL
        livenessProbe:
          tcpSocket:
            port: 6379
          initialDelaySeconds: 30
          periodSeconds: 10
        readinessProbe:
          exec:
            command:
            - valkey-cli
            - ping
          initialDelaySeconds: 5
          periodSeconds: 5
        volumeMounts:
        - name: data
          mountPath: /data
      volumes:
      - name: data
        persistentVolumeClaim:
          claimName: immich-redis-data
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: immich-redis-data
  namespace: immich
spec:
  accessModes:
    - ReadWriteOnce
  storageClassName: longhorn
  resources:
    requests:
      storage: 1Gi
---
apiVersion: v1
kind: Service
metadata:
  name: immich-redis
  namespace: immich
spec:
  selector:
    app: immich-redis
  ports:
  - port: 6379
    targetPort: 6379
    name: redis
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: immich-machine-learning
  namespace: immich
spec:
  replicas: 1
  strategy:
    type: Recreate
  selector:
    matchLabels:
      app: immich-machine-learning
  template:
    metadata:
      labels:
        app: immich-machine-learning
    spec:
      securityContext:
        runAsNonRoot: true
        runAsUser: 1000
        runAsGroup: 1000
        fsGroup: 1000
        seccompProfile:
          type: RuntimeDefault
      containers:
      - name: machine-learning
        image: ghcr.io/immich-app/immich-machine-learning:v2.2.0 # {"$imagepolicy": "flux-system:immich-machine-learning"}
        ports:
        - containerPort: 3003
          name: http
        securityContext:
          allowPrivilegeEscalation: false
          runAsNonRoot: true
          capabilities:
            drop:
            - ALL
        startupProbe:
          tcpSocket:
            port: 3003
          initialDelaySeconds: 10
          periodSeconds: 5
          failureThreshold: 30
        livenessProbe:
          tcpSocket:
            port: 3003
          periodSeconds: 10
          failureThreshold: 3
        readinessProbe:
          tcpSocket:
            port: 3003
          periodSeconds: 5
          failureThreshold: 3
        env:
        - name: DB_HOSTNAME
          value: immich-postgres-rw
        - name: DB_USERNAME
          value: immich
        - name: DB_DATABASE_NAME
          value: immich
        - name: DB_PASSWORD
          valueFrom:
            secretKeyRef:
              name: immich-db-password
              key: password
        - name: REDIS_HOSTNAME
          value: immich-redis
        volumeMounts:
        - name: cache
          mountPath: /cache
        - name: config
          mountPath: /.config
        - name: hf-cache
          mountPath: /.cache
      volumes:
      - name: cache
        persistentVolumeClaim:
          claimName: immich-ml-cache
      - name: config
        emptyDir: {}
      - name: hf-cache
        emptyDir: {}
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: immich-ml-cache
  namespace: immich
spec:
  accessModes:
    - ReadWriteOnce
  storageClassName: longhorn
  resources:
    requests:
      storage: 10Gi
---
apiVersion: v1
kind: Service
metadata:
  name: immich-machine-learning
  namespace: immich
spec:
  selector:
    app: immich-machine-learning
  ports:
  - port: 3003
    targetPort: 3003
    name: http
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: immich-server
  namespace: immich
spec:
  replicas: 2
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 0
  selector:
    matchLabels:
      app.kubernetes.io/name: immich-server
  template:
    metadata:
      labels:
        app.kubernetes.io/name: immich-server
    spec:
      securityContext:
        runAsNonRoot: true
        runAsUser: 1000
        runAsGroup: 1000
        fsGroup: 1000
        seccompProfile:
          type: RuntimeDefault
      containers:
      - name: server
        image: ghcr.io/immich-app/immich-server:v2.2.1 # {"$imagepolicy": "flux-system:immich-server"}
        ports:
        - containerPort: 2283
          name: http
        - containerPort: 8081
          name: metrics
        startupProbe:
          tcpSocket:
            port: 2283
          initialDelaySeconds: 10
          periodSeconds: 5
          failureThreshold: 30
        livenessProbe:
          tcpSocket:
            port: 2283
          periodSeconds: 10
          failureThreshold: 3
        readinessProbe:
          tcpSocket:
            port: 2283
          periodSeconds: 5
          failureThreshold: 3
        securityContext:
          allowPrivilegeEscalation: false
          runAsNonRoot: true
          capabilities:
            drop:
            - ALL
        env:
        - name: DB_HOSTNAME
          value: immich-postgres-rw
        - name: DB_USERNAME
          value: immich
        - name: DB_DATABASE_NAME
          value: immich
        - name: DB_PASSWORD
          valueFrom:
            secretKeyRef:
              name: immich-db-password
              key: password
        - name: REDIS_HOSTNAME
          value: immich-redis
        - name: IMMICH_MACHINE_LEARNING_URL
          value: http://immich-machine-learning:3003
        - name: IMMICH_TELEMETRY_INCLUDE
          value: "all"
        - name: IMMICH_CONFIG_FILE
          value: /config/immich.json
        volumeMounts:
        - name: library
          mountPath: /usr/src/app/upload
        - name: config
          mountPath: /config
          readOnly: true
      volumes:
      - name: library
        persistentVolumeClaim:
          claimName: immich-library
      - name: config
        secret:
          secretName: immich-config
---
apiVersion: v1
kind: Service
metadata:
  name: immich-server
  namespace: immich
  labels:
    app.kubernetes.io/name: immich-server
spec:
  selector:
    app.kubernetes.io/name: immich-server
  ports:
  - port: 2283
    targetPort: 2283
    name: http
  - port: 8081
    targetPort: 8081
    name: metrics
---
apiVersion: monitoring.coreos.com/v1
kind: ServiceMonitor
metadata:
  name: immich
  namespace: monitoring
  labels:
    app: immich
    app.kubernetes.io/name: immich
    release: kube-prometheus-stack
spec:
  selector:
    matchLabels:
      app.kubernetes.io/name: immich-server
  endpoints:
  - port: metrics
    path: /metrics
    interval: 30s
    scrapeTimeout: 10s
  namespaceSelector:
    matchNames:
    - immich
---
apiVersion: traefik.io/v1alpha1
kind: IngressRoute
metadata:
  name: immich
  namespace: immich
spec:
  entryPoints:
    - websecure
  routes:
    - kind: Rule
      match: Host(`immich.sonley.dev`)
      services:
        - kind: Service
          name: immich-server
          namespace: immich
          port: 2283
